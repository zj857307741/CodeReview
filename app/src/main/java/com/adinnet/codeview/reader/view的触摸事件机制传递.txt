1、 触摸事件MotionEvent
    a、 ACTION_DOWN ： 手指按下事件
    b、 ACTION_MOVE ：手指移动事件
    c、 ACTION_UP ：手指抬起事件

2、事件传递的三个阶段
    a、分发(dispatch)：事件的分发对应着dispatchTouchEvent。所有的触摸事件都是通过它来分发的。
       public void dispatchTouchEvent(MotionEvent ev);
       根据当前视图的逻辑来决定是直接消费这个事件还是将事件分发给子视图。
       返回true/false 表示事件被当前视图消费掉，不在分发下去。
       返回super.dispatchTouchEvent 表示继续分发改事件，交给子视图处理。

    b、拦截（Intercept）:事件的拦截对应着onInterceptTouchEvent。这个方法只有在viewGroup及其子类中才存在，在view和activity中是不存在的。
       public void onInterceptTouchEvent(MotionEvent ev)
       根据具体的实现逻辑来决定是否拦截
       返回true表示拦截此事件，不继续分发给子视图，同时交由自身的onTouchEvent方法进行消费。
       返回false或super.onInterceptTouchEvent 表示不对事件进行拦截，需要继续传递给子视图。

    c、消费(Consume):事件的消费对应的onTouchEvent 方法。
        public void onTouchEvent(MotionEvent ev)
        根据具体的实现逻辑来决定是否处理改事件
        返回true 表示当前视图可以处理改事件，事件将不会向上传递给父视图；
        返回false 表示当前的视图不处理改事件，事件会被传递给父视图的onTouchEvent方法进行处理。

3、View 的事件传递机制
    a、触摸事件的流程传递是从dispatchTouchEvent 开始的，如果不进行人为干预，则事件会依照嵌套层次内存传递，
    到达最内层的view 时，就由它的onTouchEvent 方法处理，该方法如果能够消费改事件，则返回true，如果处理不了，
    则返回false，这时事件就会重新向外层传递，并由外层view 的onTouchEvent方法进行处理。
    b、如果事件在向内存传递过程中由于人为的干预，事件处理函数返回true，则会导致事件被提前消费掉，内存的view将不会收到这个事件。
    c、View 控件的事件触发顺序是先执行onTouch方法，在最后才执行onClick方法。如果onTouch返回true，则事件不会继续传递，最后也不会
    调用onClick方法；如果onTouch返回false 则事件继续传递

4、ViewGroup事件传递机制
    a、触摸事件的传递顺序是activity到ViewGroup，再由ViewGroup递归传递给它的子View。
    b、ViewGroup 通过onInterceptTouchEvent 方法对事件拦截，如果该方法返回true，则事件不会继续传递给子View，
    如果返回false 或者super.onInterceptTouchEvent，则事件会继续传递给子View。
    c、在子View中对事件进行消费后，ViewGroup将接收不到任何事件。


